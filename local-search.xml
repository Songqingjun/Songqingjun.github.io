<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Golang</title>
    <link href="/Golang/"/>
    <url>/Golang/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-诞生原因"><a href="#Go-诞生原因" class="headerlink" title="Go 诞生原因"></a>Go 诞生原因</h1><ul><li>计算机硬件技术更新频繁，性能提高很快，目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能</li><li>软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言（现有的编程语言：1、风格不统一，2、计算能力不够，3、处理大并发不够好）</li><li>企业运行维护很多c、c++的项目，虽然速度很快，但是编译速度慢，还存在内存泄漏的一系列困扰</li></ul><h1 id="Go-的特点"><a href="#Go-的特点" class="headerlink" title="Go 的特点"></a>Go 的特点</h1><ul><li>从C语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等，也保留了和c语言一样的编译执行方式及弱化的指针</li><li>引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在</li><li>垃圾回收机制，内存自动回收，不需开发人员管理</li><li>天然并发<ul><li>从语言层面支持并发，实现简单</li><li>goroutine，轻量级线程，可实现大并发处理，高效利用多核</li><li>基于CPS并发模型实现</li></ul></li><li>吸收了管道通信机制，形成了Go语言特有的管道channel，可以实现不同的goroute之间的相互通信</li><li>函数可以返回多个值</li><li>新的创新，比如切片slice、延时执行defer等</li></ul><h1 id="Go-开发环境"><a href="#Go-开发环境" class="headerlink" title="Go 开发环境"></a>Go 开发环境</h1><h2 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h2><ul><li>SDK 软件开发工具包</li><li>SDK是提供给开发人员使用的，其中包含了对应开发语言的工具包</li></ul><h2 id="安装下载SDK"><a href="#安装下载SDK" class="headerlink" title="安装下载SDK"></a>安装下载SDK</h2><p><a href="https://zhuanlan.zhihu.com/p/542101567">GO官网</a><br>直接下载，下载完成之后，执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">songjunqingdeMacBook-Pro:~ songjunqing$ <span class="hljs-keyword">go</span> <span class="hljs-keyword">version</span><br><span class="hljs-keyword">go</span> <span class="hljs-keyword">version</span> go1.<span class="hljs-number">20.2</span> darwin/amd64<br></code></pre></td></tr></table></figure><p>代表安装完成</p><h2 id="编写第一个go程序"><a href="#编写第一个go程序" class="headerlink" title="编写第一个go程序"></a>编写第一个go程序</h2><p>目录结构<br>goCode&#x2F;src&#x2F;go_code&#x2F;PROJECT01&#x2F;main</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>fmt.Println(<span class="hljs-string">&quot;hello,qingjun&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>编译源码后执行</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">songjunqingdeMacBook-Pro:main songjunqing$ go build hello.go <br>songjunqingdeMacBook-Pro:main songjunqing$ ls -l<br>total 3824<br>-rw-r--r-- <span class="hljs-number"> 1 </span>songjunqing  staff      <span class="hljs-number"> 23 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 9 </span>00:01 go.mod<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>songjunqing  staff <span class="hljs-number"> 1946160 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 9 </span>00:02 hello<br>-rw-r--r-- <span class="hljs-number"> 1 </span>songjunqing  staff      <span class="hljs-number"> 74 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 9 </span>00:02 hello.go<br>songjunqingdeMacBook-Pro:main songjunqing$ ./hello <br>hello,qingjun<br></code></pre></td></tr></table></figure><h2 id="Go程序开发的注意事项"><a href="#Go程序开发的注意事项" class="headerlink" title="Go程序开发的注意事项"></a>Go程序开发的注意事项</h2><ul><li>Go源文件以“go”为扩展名</li><li>Go应用程序的执行入口是main()函数</li><li>Go语言严格区分大小写</li><li>Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性</li><li>Go编译器一行行进行编译，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错</li><li>go语言定义的变量或者import包如果没有使用到，代码不能编译通过</li><li>大括号都是成对出现，缺一不可</li></ul><h2 id="Go语言转义字符"><a href="#Go语言转义字符" class="headerlink" title="Go语言转义字符"></a>Go语言转义字符</h2><ul><li>\t : 一个制表位，实现对齐功能<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//演示转移符</span><br>fmt.Println(<span class="hljs-string">&quot;tom\tjack&quot;</span>)<br>&#125;<br><br>执行结果<br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;/Users/songjunqing/Desktop/code/goCode/src/go_code/chapter/main.go&quot;</span><br>tomjack<br></code></pre></td></tr></table></figure></li><li>\n : 换行符<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//演示换行符</span><br>fmt.Println(<span class="hljs-string">&quot;Hello\nWorld&quot;</span>)<br>&#125;<br><br>执行结果<br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;/Users/songjunqing/Desktop/code/goCode/src/go_code/chapter/main.go&quot;</span><br>tomjack<br>Hello<br>World<br></code></pre></td></tr></table></figure></li><li>\ : 一个\ <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 演示\</span><br>fmt.Println(<span class="hljs-string">&quot;Hello\\World&quot;</span>)<br>&#125;<br>执行结果<br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;/Users/songjunqing/Desktop/code/goCode/src/go_code/chapter/main.go&quot;</span><br>Hello\World<br></code></pre></td></tr></table></figure></li><li>&quot; : 一个”<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 演示&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;Hello\&quot;World&quot;</span>)<br>&#125;<br>执行结果<br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;/Users/songjunqing/Desktop/code/goCode/src/go_code/chapter/main.go&quot;</span><br>Hello<span class="hljs-string">&quot;World</span><br></code></pre></td></tr></table></figure></li><li>\r : 一个回车fmt.Println(“HELLO WROLD”)<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 演示&quot;</span><br>fmt.Println(<span class="hljs-string">&quot;还有谁就问\r你是&quot;</span>)<br>&#125;<br>执行结果<br>[Running] <span class="hljs-keyword">go</span> run <span class="hljs-string">&quot;/Users/songjunqing/Desktop/code/goCode/src/go_code/chapter/main.go&quot;</span><br>还有谁就问<br>你是<br></code></pre></td></tr></table></figure></li></ul><h2 id="注释（comment）"><a href="#注释（comment）" class="headerlink" title="注释（comment）"></a>注释（comment）</h2><h3 id="介绍注释"><a href="#介绍注释" class="headerlink" title="介绍注释"></a>介绍注释</h3><p>用于注解说明解释程序的文字就是注释，注释提高了代码的阅读性<br>注释是一个程序员必须要具有的良好编程习惯，将自己的思想通过注释先整理出来，在用代码去提现</p><h3 id="在Golang中注释有两种形式"><a href="#在Golang中注释有两种形式" class="headerlink" title="在Golang中注释有两种形式"></a>在Golang中注释有两种形式</h3><ul><li>行注释<ul><li>基本语法 &#x2F;&#x2F;注释内容</li><li>快捷键 Command+&#x2F;</li></ul></li><li>块注释<ul><li>基本语法 &#x2F;* 注释内容 *&#x2F;<br>使用细节</li></ul></li><li>对于行注释和块注释，被注释的文字，不会被Go编译器执行</li><li>块注释里面不允许有块注释嵌套</li></ul><h2 id="规范的代码风格"><a href="#规范的代码风格" class="headerlink" title="规范的代码风格"></a>规范的代码风格</h2><ul><li>正确的注释和注释风格<ul><li>Go官方推荐使用行注释来注释整个方法和语句</li><li>带看Go源码</li></ul></li><li>正确的缩进和空白<ul><li>使用一次tab操作，实现缩进，默认整体向右边移动，shift+tab整体向左移动</li><li>或者使用gofmt进行格式化</li><li>运算符两边习惯习惯各加一个空格，比如2 + 4 * 5</li></ul></li><li>代码风格<ul><li>{}不允许换行，会报错<br><img src="1.png" alt="1"></li></ul></li><li>行长规定<ul><li>一行最长不超过80个字符，超过请使用换行展示，尽量保持格式优雅<br><img src="2.png" alt="2"></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云原生架构</title>
    <link href="/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84/"/>
    <url>/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用及问题解决</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="本文搭建地址"><a href="#本文搭建地址" class="headerlink" title="本文搭建地址"></a>本文搭建地址</h2><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h2 id="hexo问题处理"><a href="#hexo问题处理" class="headerlink" title="hexo问题处理"></a>hexo问题处理</h2><h3 id="Hexo-图片插入无法显示的问题"><a href="#Hexo-图片插入无法显示的问题" class="headerlink" title="Hexo 图片插入无法显示的问题"></a>Hexo 图片插入无法显示的问题</h3><p><a href="https://zhuanlan.zhihu.com/p/542101567">原文链接</a></p><ul><li>进入你博客的根目录，然后下面顺序找到index.js:<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">node_modules</span> --&gt;</span> <span class="hljs-function"><span class="hljs-title">hexo</span>-asset-image --&gt;</span> index.js<br></code></pre></td></tr></table></figure></li><li>用VS Code 或者 记事本打开 index.js</li><li>在第 58 行，可以找到这么一行代码：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$(this)<span class="hljs-selector-class">.attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config<span class="hljs-selector-class">.root</span> + link + <span class="hljs-attribute">src</span>);<br></code></pre></td></tr></table></figure></li><li>把这一行代码改成下面这样<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, src);<br></code></pre></td></tr></table></figure></li><li>保存文件</li></ul><p>注意：</p><ul><li>要先把 _config.yml中的 post_asset_folder: false 改成 post_asset_folder: true (默认是false，如果你没有修改过，那请去修改)</li><li>圆括号里面只要写 图片名.后缀 就可以了，不要多加任何的东西。</li><li>如果图片不显示，需要看下imgs目录和本身醒目目录是否都存有图片</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>云上容灾交付</title>
    <link href="/%E4%BA%91%E4%B8%8A%E5%AE%B9%E7%81%BE%E4%BA%A4%E4%BB%98/"/>
    <url>/%E4%BA%91%E4%B8%8A%E5%AE%B9%E7%81%BE%E4%BA%A4%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<h1 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h1><ul><li>RPO（Recovery Point Objective）即数据恢复点目标，主要指的是业务系统所能容忍的数据丢失量。</li><li>RTO（Recovery Time Objective）即恢复时间目标，主要指的是所能容忍的业务停止服务的最长时间，也就是从灾难发生到业务系统恢复服务功能所需要的最短时间周期。</li></ul><h1 id="云上容灾交付架构"><a href="#云上容灾交付架构" class="headerlink" title="云上容灾交付架构"></a>云上容灾交付架构</h1><p><img src="2.png" alt="2"></p><h2 id="同城架构容灾"><a href="#同城架构容灾" class="headerlink" title="同城架构容灾"></a>同城架构容灾</h2><p>同城容灾架构指在同城或相近的区域内，基于两个数据中心开展业务连续建设的技术架构,该架构的主要特点包括：</p><ul><li>两个中心属于一朵云架构</li><li>生产中心提供信息系统完整功能，灾备中心至少提供信息系统的关键功能</li><li>可通过全局负载均衡或域名服务提供业务流量管理</li><li>应用层支持双活和应用层主备两种模式</li><li>数据层面看，为了保持数据一致性，采用主备访问模式<br><img src="3.png" alt="3"></li></ul><h2 id="两地三中心容灾架构"><a href="#两地三中心容灾架构" class="headerlink" title="两地三中心容灾架构"></a>两地三中心容灾架构</h2><p>两地三中心架构，是业界比较通用的叫法，是同城容灾架构 + 异地容灾架构的组合。通常同城的两个数据中心采取同步 &#x2F; 异步的数据同步方式，同城和异地之间采取异步的数据同步方式。该架构既可以应对城市内单中心的灾难，又可以应对城市级的灾难。<br>该架构的主要特点包括：</p><ul><li>三个中心属于两朵云架构，同城的两中心属于一朵云，异地的一个中心属于另一朵云，默认两朵云之间，网络隔离，资源隔离，涉及跨云访问的网络，需要开通权限</li><li>同城两个中心应提供信息系统的完整功能，异地一个中心应至少提供信息系统的关键功能</li><li>可以通过域名服务DNS，来提供业务流量的管理</li><li>从网络层看，同城的两个数据中心可采取流量双活模式，同城和异地之间则采用流量主备模式。<br>缺点：</li><li>灾备中心平时不提供服务，在切换到灾备中心前，无法确定是否可以成功恢复业务系统的运行。 </li><li>灾备中心平时不提供服务，灾备资源会处于闲置状态，资源闲置率较高。 </li><li>平时提供服务的生产中心在单地域，当业务体量的规模接近生产中心资源上限时，无法解决单地域资源瓶颈的问题。<br><img src="8.png" alt="8"></li></ul><h2 id="异地多活架构"><a href="#异地多活架构" class="headerlink" title="异地多活架构"></a>异地多活架构</h2><p>“异地多活”，又称“应用多活”，是以应用为中心的云原生容灾架构。多活是容灾技术的一种高级形态，指在同城或异地数据中心，建设一套与本地生产系统部分或全部对应的生产系统，所有数据中心内的信息系统同时对外提供服务。当灾难发生后，多活管理系统可以在分钟级内实现业务流量切换，用户可能都不会感受到灾难发生和容灾切换的过程。阿里云的“同城多活”和“异地多活”，都是典型的应用多活的实现技术。该架构定位是一套支持跨地域、跨平台的通用多活方案，该架构的主要特点包括：</p><ul><li>业务流量多活（BFA，business flow active）：应用多活的视角是业务，多活容灾系统具备按业务特征进行生产流量的精细化调配。</li><li>同城多活（LRA，local region active）：应用是分布式系统的最小服务集合，当主中心出现问题进入容灾态时，要具备全局或局部应用的多活切换能力。</li><li>异地多活（UDA，ultra distance active）：在超远距离（建议数据中心距离≥ 100km）时，业务系统仍具备较好的访问性能。进入容灾态时，RTO 和 RPO 在分钟级<br><img src="5.png" alt="5"></li></ul><h2 id="混合云多活"><a href="#混合云多活" class="headerlink" title="混合云多活"></a>混合云多活</h2><p>向上对业务屏蔽容灾细节，提供统一的多活编程范式；向下对云平台技术保持兼容，支持公共云、私有云、托管私有云、边缘计算节点等不同部署模式的多活场景。<br><img src="7.png" alt="7"></p><h1 id="交付标准化参考框架"><a href="#交付标准化参考框架" class="headerlink" title="交付标准化参考框架"></a>交付标准化参考框架</h1><p>容灾是一个系统化、体系化的工程，通常会覆盖分析、规划、设计和实施环节。项目是否成功、是否达到设计目标，需要多种手段进行分阶段管理和衡量。通过容灾演练来验证容灾建设效果是最直接有效的手段，只有成功的演练才能最好地证明设计和交付的正确性。但同时，容灾演练是具有较大风险的过程，稍有闪失可能导致业务或数据损失。<br>为了保证容灾演练的成功和灾难恢复预案的有效性，本文结合多个项目的交付经验，总结出一套适合容灾项目交付的标准化参考框架，称之为“五阶十三步”。<br>五阶： 面向管理人员，标记交付过程的关键里程碑，并定义出容灾项目分阶段的验收范围，包括：需求分析、现状调研、容灾方案设计、演练方案设计、演练实施。<br>十三步：面向技术人员，定义出每个阶段的关键技术动作，方便不同的技术人员有相同的标准化流程可遵循，包括：可交付评审，应用调研，云平台调研，基础设施调研，总体方案设计，云平台容灾部署，应用容灾设计，应用容灾部署，演练场景设计，应急预案设计，DRP 方案设计，演练实施，演练复盘。<br><img src="6.png" alt="6"></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
