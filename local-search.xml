<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>云原生架构</title>
    <link href="/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84/"/>
    <url>/%E4%BA%91%E5%8E%9F%E7%94%9F%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用及问题解决</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="本文搭建地址"><a href="#本文搭建地址" class="headerlink" title="本文搭建地址"></a>本文搭建地址</h2><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><h2 id="hexo问题处理"><a href="#hexo问题处理" class="headerlink" title="hexo问题处理"></a>hexo问题处理</h2><h3 id="Hexo-图片插入无法显示的问题"><a href="#Hexo-图片插入无法显示的问题" class="headerlink" title="Hexo 图片插入无法显示的问题"></a>Hexo 图片插入无法显示的问题</h3><p><a href="https://zhuanlan.zhihu.com/p/542101567">原文链接</a></p><ul><li>进入你博客的根目录，然后下面顺序找到index.js:<figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">node_modules</span> --&gt;</span> <span class="hljs-function"><span class="hljs-title">hexo</span>-asset-image --&gt;</span> index.js<br></code></pre></td></tr></table></figure></li><li>用VS Code 或者 记事本打开 index.js</li><li>在第 58 行，可以找到这么一行代码：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$(this)<span class="hljs-selector-class">.attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, config<span class="hljs-selector-class">.root</span> + link + <span class="hljs-attribute">src</span>);<br></code></pre></td></tr></table></figure></li><li>把这一行代码改成下面这样<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;src&#x27;</span>, src);<br></code></pre></td></tr></table></figure></li><li>保存文件</li></ul><p>注意：</p><ul><li>要先把 _config.yml中的 post_asset_folder: false 改成 post_asset_folder: true (默认是false，如果你没有修改过，那请去修改)</li><li>圆括号里面只要写 图片名.后缀 就可以了，不要多加任何的东西。</li><li>如果图片不显示，需要看下imgs目录和本身醒目目录是否都存有图片</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>云上容灾交付</title>
    <link href="/%E4%BA%91%E4%B8%8A%E5%AE%B9%E7%81%BE%E4%BA%A4%E4%BB%98/"/>
    <url>/%E4%BA%91%E4%B8%8A%E5%AE%B9%E7%81%BE%E4%BA%A4%E4%BB%98/</url>
    
    <content type="html"><![CDATA[<h1 id="名词概念"><a href="#名词概念" class="headerlink" title="名词概念"></a>名词概念</h1><ul><li>RPO（Recovery Point Objective）即数据恢复点目标，主要指的是业务系统所能容忍的数据丢失量。</li><li>RTO（Recovery Time Objective）即恢复时间目标，主要指的是所能容忍的业务停止服务的最长时间，也就是从灾难发生到业务系统恢复服务功能所需要的最短时间周期。</li></ul><h1 id="云上容灾交付架构"><a href="#云上容灾交付架构" class="headerlink" title="云上容灾交付架构"></a>云上容灾交付架构</h1><p><img src="2.png" alt="2"></p><h2 id="同城架构容灾"><a href="#同城架构容灾" class="headerlink" title="同城架构容灾"></a>同城架构容灾</h2><p>同城容灾架构指在同城或相近的区域内，基于两个数据中心开展业务连续建设的技术架构,该架构的主要特点包括：</p><ul><li>两个中心属于一朵云架构</li><li>生产中心提供信息系统完整功能，灾备中心至少提供信息系统的关键功能</li><li>可通过全局负载均衡或域名服务提供业务流量管理</li><li>应用层支持双活和应用层主备两种模式</li><li>数据层面看，为了保持数据一致性，采用主备访问模式<br><img src="3.png" alt="3"></li></ul><h2 id="两地三中心容灾架构"><a href="#两地三中心容灾架构" class="headerlink" title="两地三中心容灾架构"></a>两地三中心容灾架构</h2><p>两地三中心架构，是业界比较通用的叫法，是同城容灾架构 + 异地容灾架构的组合。通常同城的两个数据中心采取同步 &#x2F; 异步的数据同步方式，同城和异地之间采取异步的数据同步方式。该架构既可以应对城市内单中心的灾难，又可以应对城市级的灾难。<br>该架构的主要特点包括：</p><ul><li>三个中心属于两朵云架构，同城的两中心属于一朵云，异地的一个中心属于另一朵云，默认两朵云之间，网络隔离，资源隔离，涉及跨云访问的网络，需要开通权限</li><li>同城两个中心应提供信息系统的完整功能，异地一个中心应至少提供信息系统的关键功能</li><li>可以通过域名服务DNS，来提供业务流量的管理</li><li>从网络层看，同城的两个数据中心可采取流量双活模式，同城和异地之间则采用流量主备模式。<br>缺点：</li><li>灾备中心平时不提供服务，在切换到灾备中心前，无法确定是否可以成功恢复业务系统的运行。 </li><li>灾备中心平时不提供服务，灾备资源会处于闲置状态，资源闲置率较高。 </li><li>平时提供服务的生产中心在单地域，当业务体量的规模接近生产中心资源上限时，无法解决单地域资源瓶颈的问题。<br><img src="4.png" alt="4"></li></ul><h2 id="异地多活架构"><a href="#异地多活架构" class="headerlink" title="异地多活架构"></a>异地多活架构</h2><p>“异地多活”，又称“应用多活”，是以应用为中心的云原生容灾架构。多活是容灾技术的一种高级形态，指在同城或异地数据中心，建设一套与本地生产系统部分或全部对应的生产系统，所有数据中心内的信息系统同时对外提供服务。当灾难发生后，多活管理系统可以在分钟级内实现业务流量切换，用户可能都不会感受到灾难发生和容灾切换的过程。阿里云的“同城多活”和“异地多活”，都是典型的应用多活的实现技术。该架构定位是一套支持跨地域、跨平台的通用多活方案，该架构的主要特点包括：</p><ul><li>业务流量多活（BFA，business flow active）：应用多活的视角是业务，多活容灾系统具备按业务特征进行生产流量的精细化调配。</li><li>同城多活（LRA，local region active）：应用是分布式系统的最小服务集合，当主中心出现问题进入容灾态时，要具备全局或局部应用的多活切换能力。</li><li>异地多活（UDA，ultra distance active）：在超远距离（建议数据中心距离≥ 100km）时，业务系统仍具备较好的访问性能。进入容灾态时，RTO 和 RPO 在分钟级<br><img src="5.png" alt="5"></li></ul><h2 id="混合云多活"><a href="#混合云多活" class="headerlink" title="混合云多活"></a>混合云多活</h2><p>向上对业务屏蔽容灾细节，提供统一的多活编程范式；向下对云平台技术保持兼容，支持公共云、私有云、托管私有云、边缘计算节点等不同部署模式的多活场景。<br><img src="7.png" alt="7"></p><h1 id="交付标准化参考框架"><a href="#交付标准化参考框架" class="headerlink" title="交付标准化参考框架"></a>交付标准化参考框架</h1><p>容灾是一个系统化、体系化的工程，通常会覆盖分析、规划、设计和实施环节。项目是否成功、是否达到设计目标，需要多种手段进行分阶段管理和衡量。通过容灾演练来验证容灾建设效果是最直接有效的手段，只有成功的演练才能最好地证明设计和交付的正确性。但同时，容灾演练是具有较大风险的过程，稍有闪失可能导致业务或数据损失。<br>为了保证容灾演练的成功和灾难恢复预案的有效性，本文结合多个项目的交付经验，总结出一套适合容灾项目交付的标准化参考框架，称之为“五阶十三步”。<br>五阶： 面向管理人员，标记交付过程的关键里程碑，并定义出容灾项目分阶段的验收范围，包括：需求分析、现状调研、容灾方案设计、演练方案设计、演练实施。<br>十三步：面向技术人员，定义出每个阶段的关键技术动作，方便不同的技术人员有相同的标准化流程可遵循，包括：可交付评审，应用调研，云平台调研，基础设施调研，总体方案设计，云平台容灾部署，应用容灾设计，应用容灾部署，演练场景设计，应急预案设计，DRP 方案设计，演练实施，演练复盘。<br><img src="6.png" alt="6"></p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
